#include <stdio.h>

struct process
{
    int all[6], max[6], need[6], finished, request[6];
} p[10];

int avail[6], sseq[10], ss = 0, check1 = 0, check2 = 0, n;
int nor;
int work[6];

int safeseq(void);

int main()
{
    int ch, i = 0, j = 0, k, pid, ch1;
    int violationcheck = 0, waitcheck = 0;

    printf("\n\n\t 1. Input");
    printf("\n\n\t 2. New Request");
    printf("\n\n\t 3. Safe State or Not");
    printf("\n\n\t 4. Print");
    printf("\n\n\t 5. Exit");

    do
    {
        printf("\n\n\t Enter your choice : ");
        scanf("%d", &ch);

        switch (ch)
        {
            case 1:
                printf("\n\n\t Enter the number of processes: ");
                scanf("%d", &n);
                printf("\n\n\t Enter the number of resources: ");
                scanf("%d", &nor);
                printf("\n\n\t Enter the available resources: ");
                for (j = 0; j < nor; j++)
                {
                    printf("\n\n\t For Resource type %d: ", j);
                    scanf("%d", &avail[j]);
                }
                for (i = 0; i < n; i++)
                {
                    printf("\n\n\t Enter Max and Allocated resources for P%d: ", i);
                    for (j = 0; j < nor; j++)
                    {
                        printf("\n\n\t Enter the Max of resource %d: ", j);
                        scanf("%d", &p[i].max[j]);
                        printf("\n\n\t Allocation of resource %d: ", j);
                        scanf("%d", &p[i].all[j]);
                        if (p[i].all[j] > p[i].max[j])
                        {
                            printf("\n\n\t Allocation should be less than or equal to max");
                            j--;
                        }
                        else
                            p[i].need[j] = p[i].max[j] - p[i].all[j];
                        avail[j] = avail[j] - p[i].all[j];
                    }
                }
                break;

            case 2:
                violationcheck = 0;
                waitcheck = 0;
                printf("\n\n\t Requesting process id: ");
                scanf("%d", &pid);
                for (j = 0; j < nor; j++)
                {
                    printf("\n\n\t Number of Request for resource %d: ", j);
                    scanf("%d", &p[pid].request[j]);
                    if (p[pid].request[j] > p[pid].need[j])
                        violationcheck = 1;
                    if (p[pid].request[j] > avail[j])
                        waitcheck = 1;
                }
                if (violationcheck == 1)
                    printf("\n\n\t The Process Exceeds its Max Need: Terminated");
                else if (waitcheck == 1)
                    printf("\n\n\t Lack of Resources: Process State - Wait");
                else
                {
                    for (j = 0; j < nor; j++)
                    {
                        avail[j] = avail[j] - p[pid].request[j];
                        p[pid].all[j] = p[pid].all[j] + p[pid].request[j];
                        p[pid].need[j] = p[pid].need[j] - p[pid].request[j];
                    }
                    ch1 = safeseq();
                    if (ch1 == 0)
                    {
                        printf("\n\n\t Granting leads to Unsafe state: ");
                        printf("\n\n\t Request Denied ");
                        for (j = 0; j < nor; j++)
                        {
                            avail[j] = avail[j] + p[pid].request[j];
                            p[pid].all[j] = p[pid].all[j] - p[pid].request[j];
                            p[pid].need[j] = p[pid].need[j] + p[pid].request[j];
                        }
                    }
                    else if (ch1 == 1)
                        printf("\n\n\t Request Committed ");
                }
                break;

            case 3:
                if (safeseq() == 1)
                    printf("\n\n\t The System is in a safe state ");
                else
                    printf("\n\n\t The System is Not in a safe state ");
                break;

            case 4:
                printf("\n\n\t Number of processes: %d", n);
                printf("\n\n\t Number of Resources: %d", nor);
                printf("\n\n\t Pid \t   Max \t   Allocated \t Need ");
                for (i = 0; i < n; i++)
                {
                    printf("\n\n\t P%d : ", i);
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].max[j]);
                    printf("\t");
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].all[j]);
                    printf("\t");
                    for (j = 0; j < nor; j++)
                        printf(" %d ", p[i].need[j]);
                }
                printf("\n\n\t Available: ");
                for (i = 0; i < nor; i++)
                    printf(" %d ", avail[i]);
                break;

            case 5:
                return 0;
        }

    } while (ch != 5);

    return 0;
}

int safeseq()
{
    int i, j, k, m;
    ss = 0;

    for (j = 0; j < nor; j++)
        work[j] = avail[j];

    for (j = 0; j < n; j++)
        p[j].finished = 0;

    for (k = 0; k < nor; k++)
    {
        for (j = 0; j < n; j++)
        {
            if (p[j].finished == 0)
            {
                check1 = 0;
                for (m = 0; m < nor; m++)
                {
                    if (p[j].need[m] <= work[m])
                        check1++;
                }
                if (check1 == nor)
                {
                    for (m = 0; m < nor; m++)
                    {
                        work[m] = work[m] + p[j].all[m];
                        p[j].finished = 1;
                    }
                    sseq[ss] = j;
                    ss++;
                }
            }
        }
    }

    check2 = 0;

    for (i = 0; i < n; i++)
    {
        if (p[i].finished == 1)
            check2++;
    }

    printf("\n\n\t");

    if (check2 >= n)
    {
        printf("\n\n\t The system is in a safe state\n");
        for (j = 0; j < n; j++)
            printf("P%d, ", sseq[j]);
        return 1;
    }
    else
    {
        printf("\n\n\t The system is Not in a safe state\n");
        return 0;
    }
}
